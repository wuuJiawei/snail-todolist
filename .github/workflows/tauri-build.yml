name: Tauri Desktop Build

on:
  push:
    branches:
      - main
      - feature/tauri-integration
    tags:
      - 'v*' # 当推送带有 v 前缀的标签时触发
  pull_request:

jobs:
  build:
    name: Build ${{ matrix.os }} ${{ matrix.target || '' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS Intel
          - os: macos-latest
            target: x86_64-apple-darwin
            args: --target x86_64-apple-darwin
            ext: dmg
          # macOS Apple Silicon
          - os: macos-latest
            target: aarch64-apple-darwin
            args: --target aarch64-apple-darwin
            ext: dmg
          # Ubuntu
          - os: ubuntu-22.04
            ext: AppImage
          # Windows
          - os: windows-latest
            ext: msi

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install system dependencies (Linux)
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target || '' }}

      - name: Install dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri:build -- ${{ matrix.args || '' }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snail-todolist-${{ matrix.os }}${{ matrix.target && format('-{0}', matrix.target) || '' }}
          path: |
            src-tauri/target/${{ matrix.target && format('{0}/release', matrix.target) || 'release' }}/bundle/**/*
          if-no-files-found: warn

      # 提取版本号
      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      # 找到构建好的安装包
      - name: Find installer
        id: find_installer
        shell: bash
        run: |
          if [ "${{ matrix.target }}" != "" ]; then
            INSTALLER_PATH=$(find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.${INSTALLER_EXT}" | head -n 1)
          else
            INSTALLER_PATH=$(find src-tauri/target/release/bundle -name "*.${INSTALLER_EXT}" | head -n 1)
          fi
          
          if [ -z "$INSTALLER_PATH" ]; then
            echo "No installer found with extension .${INSTALLER_EXT}"
            exit 1
          fi
          
          INSTALLER_NAME=$(basename "$INSTALLER_PATH")
          echo "Found installer: $INSTALLER_PATH"
          echo "installer_path=$INSTALLER_PATH" >> $GITHUB_OUTPUT
          echo "installer_name=$INSTALLER_NAME" >> $GITHUB_OUTPUT
        env:
          INSTALLER_EXT: ${{ matrix.ext }}

  # 只有在推送标签时才创建 Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          name: SnailTodoList v${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.AppImage
            artifacts/**/*.msi
            artifacts/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


